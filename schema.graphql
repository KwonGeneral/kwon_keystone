# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AppInfoModel {
  id: ID!
  version: String
  name: String
  header: String
  title: String
  content: String
  description: String
  buildNumber: String
  packageName: String
  updatedAt: DateTime
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AppInfoModelWhereUniqueInput {
  id: ID
}

input AppInfoModelWhereInput {
  AND: [AppInfoModelWhereInput!]
  OR: [AppInfoModelWhereInput!]
  NOT: [AppInfoModelWhereInput!]
  id: IDFilter
  version: StringFilter
  name: StringFilter
  header: StringFilter
  title: StringFilter
  content: StringFilter
  description: StringFilter
  buildNumber: StringFilter
  packageName: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AppInfoModelOrderByInput {
  id: OrderDirection
  version: OrderDirection
  name: OrderDirection
  header: OrderDirection
  title: OrderDirection
  content: OrderDirection
  description: OrderDirection
  buildNumber: OrderDirection
  packageName: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AppInfoModelUpdateInput {
  version: String
  name: String
  header: String
  title: String
  content: String
  description: String
  buildNumber: String
  packageName: String
  updatedAt: DateTime
  createdAt: DateTime
}

input AppInfoModelUpdateArgs {
  where: AppInfoModelWhereUniqueInput!
  data: AppInfoModelUpdateInput!
}

input AppInfoModelCreateInput {
  version: String
  name: String
  header: String
  title: String
  content: String
  description: String
  buildNumber: String
  packageName: String
  updatedAt: DateTime
  createdAt: DateTime
}

type AttachmentModel {
  id: ID!
  name: String
  size: Int
  base64: String
  extension: String
  type: String
  updatedAt: DateTime
  createdAt: DateTime
}

input AttachmentModelWhereUniqueInput {
  id: ID
}

input AttachmentModelWhereInput {
  AND: [AttachmentModelWhereInput!]
  OR: [AttachmentModelWhereInput!]
  NOT: [AttachmentModelWhereInput!]
  id: IDFilter
  name: StringFilter
  size: IntNullableFilter
  base64: StringFilter
  extension: StringFilter
  type: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AttachmentModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  size: OrderDirection
  base64: OrderDirection
  extension: OrderDirection
  type: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input AttachmentModelUpdateInput {
  name: String
  size: Int
  base64: String
  extension: String
  type: String
  updatedAt: DateTime
  createdAt: DateTime
}

input AttachmentModelUpdateArgs {
  where: AttachmentModelWhereUniqueInput!
  data: AttachmentModelUpdateInput!
}

input AttachmentModelCreateInput {
  name: String
  size: Int
  base64: String
  extension: String
  type: String
  updatedAt: DateTime
  createdAt: DateTime
}

type LocationModel {
  id: ID!
  name: String
  address: String
  addressDetail: String
  latitude: String
  longitude: String
  updatedAt: DateTime
  createdAt: DateTime
}

input LocationModelWhereUniqueInput {
  id: ID
}

input LocationModelWhereInput {
  AND: [LocationModelWhereInput!]
  OR: [LocationModelWhereInput!]
  NOT: [LocationModelWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  addressDetail: StringFilter
  latitude: StringFilter
  longitude: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input LocationModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  addressDetail: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input LocationModelUpdateInput {
  name: String
  address: String
  addressDetail: String
  latitude: String
  longitude: String
  updatedAt: DateTime
  createdAt: DateTime
}

input LocationModelUpdateArgs {
  where: LocationModelWhereUniqueInput!
  data: LocationModelUpdateInput!
}

input LocationModelCreateInput {
  name: String
  address: String
  addressDetail: String
  latitude: String
  longitude: String
  updatedAt: DateTime
  createdAt: DateTime
}

type PostModel {
  id: ID!
  version: String
  header: String
  title: String
  content: String
  description: String
  author: String
  status: String
  url: String
  isTopFixed: String
  level: String
  updatedAt: DateTime
  createdAt: DateTime
}

input PostModelWhereUniqueInput {
  id: ID
}

input PostModelWhereInput {
  AND: [PostModelWhereInput!]
  OR: [PostModelWhereInput!]
  NOT: [PostModelWhereInput!]
  id: IDFilter
  version: StringFilter
  header: StringFilter
  title: StringFilter
  content: StringFilter
  description: StringFilter
  author: StringFilter
  status: StringFilter
  url: StringFilter
  isTopFixed: StringFilter
  level: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input PostModelOrderByInput {
  id: OrderDirection
  version: OrderDirection
  header: OrderDirection
  title: OrderDirection
  content: OrderDirection
  description: OrderDirection
  author: OrderDirection
  status: OrderDirection
  url: OrderDirection
  isTopFixed: OrderDirection
  level: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PostModelUpdateInput {
  version: String
  header: String
  title: String
  content: String
  description: String
  author: String
  status: String
  url: String
  isTopFixed: String
  level: String
  updatedAt: DateTime
  createdAt: DateTime
}

input PostModelUpdateArgs {
  where: PostModelWhereUniqueInput!
  data: PostModelUpdateInput!
}

input PostModelCreateInput {
  version: String
  header: String
  title: String
  content: String
  description: String
  author: String
  status: String
  url: String
  isTopFixed: String
  level: String
  updatedAt: DateTime
  createdAt: DateTime
}

type RuleModel {
  id: ID!
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

input RuleModelWhereUniqueInput {
  id: ID
}

input RuleModelWhereInput {
  AND: [RuleModelWhereInput!]
  OR: [RuleModelWhereInput!]
  NOT: [RuleModelWhereInput!]
  id: IDFilter
  name: StringFilter
  header: StringFilter
  title: StringFilter
  content: StringFilter
  description: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input RuleModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  header: OrderDirection
  title: OrderDirection
  content: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input RuleModelUpdateInput {
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

input RuleModelUpdateArgs {
  where: RuleModelWhereUniqueInput!
  data: RuleModelUpdateInput!
}

input RuleModelCreateInput {
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

type TermsModel {
  id: ID!
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

input TermsModelWhereUniqueInput {
  id: ID
}

input TermsModelWhereInput {
  AND: [TermsModelWhereInput!]
  OR: [TermsModelWhereInput!]
  NOT: [TermsModelWhereInput!]
  id: IDFilter
  name: StringFilter
  header: StringFilter
  title: StringFilter
  content: StringFilter
  description: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input TermsModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  header: OrderDirection
  title: OrderDirection
  content: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input TermsModelUpdateInput {
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

input TermsModelUpdateArgs {
  where: TermsModelWhereUniqueInput!
  data: TermsModelUpdateInput!
}

input TermsModelCreateInput {
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

type UserModel {
  id: ID!
  level: Int
  name: String
  email: String
  password: PasswordState
  phone: String
  address: String
  addressDetail: String
  gender: String
  birthDay: String
  updatedAt: DateTime
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserModelWhereUniqueInput {
  id: ID
  email: String
}

input UserModelWhereInput {
  AND: [UserModelWhereInput!]
  OR: [UserModelWhereInput!]
  NOT: [UserModelWhereInput!]
  id: IDFilter
  level: IntFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  address: StringFilter
  addressDetail: StringFilter
  gender: StringFilter
  birthDay: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input UserModelOrderByInput {
  id: OrderDirection
  level: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  address: OrderDirection
  addressDetail: OrderDirection
  gender: OrderDirection
  birthDay: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input UserModelUpdateInput {
  level: Int
  name: String
  email: String
  password: String
  phone: String
  address: String
  addressDetail: String
  gender: String
  birthDay: String
  updatedAt: DateTime
  createdAt: DateTime
}

input UserModelUpdateArgs {
  where: UserModelWhereUniqueInput!
  data: UserModelUpdateInput!
}

input UserModelCreateInput {
  level: Int
  name: String
  email: String
  password: String
  phone: String
  address: String
  addressDetail: String
  gender: String
  birthDay: String
  updatedAt: DateTime
  createdAt: DateTime
}

type WebSiteInfoModel {
  id: ID!
  url: String
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

input WebSiteInfoModelWhereUniqueInput {
  id: ID
}

input WebSiteInfoModelWhereInput {
  AND: [WebSiteInfoModelWhereInput!]
  OR: [WebSiteInfoModelWhereInput!]
  NOT: [WebSiteInfoModelWhereInput!]
  id: IDFilter
  url: StringFilter
  name: StringFilter
  header: StringFilter
  title: StringFilter
  content: StringFilter
  description: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input WebSiteInfoModelOrderByInput {
  id: OrderDirection
  url: OrderDirection
  name: OrderDirection
  header: OrderDirection
  title: OrderDirection
  content: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input WebSiteInfoModelUpdateInput {
  url: String
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

input WebSiteInfoModelUpdateArgs {
  where: WebSiteInfoModelWhereUniqueInput!
  data: WebSiteInfoModelUpdateInput!
}

input WebSiteInfoModelCreateInput {
  url: String
  name: String
  header: String
  title: String
  content: String
  description: String
  updatedAt: DateTime
  createdAt: DateTime
}

type WebSiteInfo_AppInfo_Model {
  id: ID!
  websiteId: WebSiteInfoModel
  appInfoList(where: AppInfoModelWhereInput! = {}, orderBy: [AppInfoModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppInfoModelWhereUniqueInput): [AppInfoModel!]
  appInfoListCount(where: AppInfoModelWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
}

input WebSiteInfo_AppInfo_ModelWhereUniqueInput {
  id: ID
}

input WebSiteInfo_AppInfo_ModelWhereInput {
  AND: [WebSiteInfo_AppInfo_ModelWhereInput!]
  OR: [WebSiteInfo_AppInfo_ModelWhereInput!]
  NOT: [WebSiteInfo_AppInfo_ModelWhereInput!]
  id: IDFilter
  websiteId: WebSiteInfoModelWhereInput
  appInfoList: AppInfoModelManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input AppInfoModelManyRelationFilter {
  every: AppInfoModelWhereInput
  some: AppInfoModelWhereInput
  none: AppInfoModelWhereInput
}

input WebSiteInfo_AppInfo_ModelOrderByInput {
  id: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input WebSiteInfo_AppInfo_ModelUpdateInput {
  websiteId: WebSiteInfoModelRelateToOneForUpdateInput
  appInfoList: AppInfoModelRelateToManyForUpdateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input WebSiteInfoModelRelateToOneForUpdateInput {
  create: WebSiteInfoModelCreateInput
  connect: WebSiteInfoModelWhereUniqueInput
  disconnect: Boolean
}

input AppInfoModelRelateToManyForUpdateInput {
  disconnect: [AppInfoModelWhereUniqueInput!]
  set: [AppInfoModelWhereUniqueInput!]
  create: [AppInfoModelCreateInput!]
  connect: [AppInfoModelWhereUniqueInput!]
}

input WebSiteInfo_AppInfo_ModelUpdateArgs {
  where: WebSiteInfo_AppInfo_ModelWhereUniqueInput!
  data: WebSiteInfo_AppInfo_ModelUpdateInput!
}

input WebSiteInfo_AppInfo_ModelCreateInput {
  websiteId: WebSiteInfoModelRelateToOneForCreateInput
  appInfoList: AppInfoModelRelateToManyForCreateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input WebSiteInfoModelRelateToOneForCreateInput {
  create: WebSiteInfoModelCreateInput
  connect: WebSiteInfoModelWhereUniqueInput
}

input AppInfoModelRelateToManyForCreateInput {
  create: [AppInfoModelCreateInput!]
  connect: [AppInfoModelWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAppInfoModel(data: AppInfoModelCreateInput!): AppInfoModel
  createAppInfoModels(data: [AppInfoModelCreateInput!]!): [AppInfoModel]
  updateAppInfoModel(where: AppInfoModelWhereUniqueInput!, data: AppInfoModelUpdateInput!): AppInfoModel
  updateAppInfoModels(data: [AppInfoModelUpdateArgs!]!): [AppInfoModel]
  deleteAppInfoModel(where: AppInfoModelWhereUniqueInput!): AppInfoModel
  deleteAppInfoModels(where: [AppInfoModelWhereUniqueInput!]!): [AppInfoModel]
  createAttachmentModel(data: AttachmentModelCreateInput!): AttachmentModel
  createAttachmentModels(data: [AttachmentModelCreateInput!]!): [AttachmentModel]
  updateAttachmentModel(where: AttachmentModelWhereUniqueInput!, data: AttachmentModelUpdateInput!): AttachmentModel
  updateAttachmentModels(data: [AttachmentModelUpdateArgs!]!): [AttachmentModel]
  deleteAttachmentModel(where: AttachmentModelWhereUniqueInput!): AttachmentModel
  deleteAttachmentModels(where: [AttachmentModelWhereUniqueInput!]!): [AttachmentModel]
  createLocationModel(data: LocationModelCreateInput!): LocationModel
  createLocationModels(data: [LocationModelCreateInput!]!): [LocationModel]
  updateLocationModel(where: LocationModelWhereUniqueInput!, data: LocationModelUpdateInput!): LocationModel
  updateLocationModels(data: [LocationModelUpdateArgs!]!): [LocationModel]
  deleteLocationModel(where: LocationModelWhereUniqueInput!): LocationModel
  deleteLocationModels(where: [LocationModelWhereUniqueInput!]!): [LocationModel]
  createPostModel(data: PostModelCreateInput!): PostModel
  createPostModels(data: [PostModelCreateInput!]!): [PostModel]
  updatePostModel(where: PostModelWhereUniqueInput!, data: PostModelUpdateInput!): PostModel
  updatePostModels(data: [PostModelUpdateArgs!]!): [PostModel]
  deletePostModel(where: PostModelWhereUniqueInput!): PostModel
  deletePostModels(where: [PostModelWhereUniqueInput!]!): [PostModel]
  createRuleModel(data: RuleModelCreateInput!): RuleModel
  createRuleModels(data: [RuleModelCreateInput!]!): [RuleModel]
  updateRuleModel(where: RuleModelWhereUniqueInput!, data: RuleModelUpdateInput!): RuleModel
  updateRuleModels(data: [RuleModelUpdateArgs!]!): [RuleModel]
  deleteRuleModel(where: RuleModelWhereUniqueInput!): RuleModel
  deleteRuleModels(where: [RuleModelWhereUniqueInput!]!): [RuleModel]
  createTermsModel(data: TermsModelCreateInput!): TermsModel
  createTermsModels(data: [TermsModelCreateInput!]!): [TermsModel]
  updateTermsModel(where: TermsModelWhereUniqueInput!, data: TermsModelUpdateInput!): TermsModel
  updateTermsModels(data: [TermsModelUpdateArgs!]!): [TermsModel]
  deleteTermsModel(where: TermsModelWhereUniqueInput!): TermsModel
  deleteTermsModels(where: [TermsModelWhereUniqueInput!]!): [TermsModel]
  createUserModel(data: UserModelCreateInput!): UserModel
  createUserModels(data: [UserModelCreateInput!]!): [UserModel]
  updateUserModel(where: UserModelWhereUniqueInput!, data: UserModelUpdateInput!): UserModel
  updateUserModels(data: [UserModelUpdateArgs!]!): [UserModel]
  deleteUserModel(where: UserModelWhereUniqueInput!): UserModel
  deleteUserModels(where: [UserModelWhereUniqueInput!]!): [UserModel]
  createWebSiteInfoModel(data: WebSiteInfoModelCreateInput!): WebSiteInfoModel
  createWebSiteInfoModels(data: [WebSiteInfoModelCreateInput!]!): [WebSiteInfoModel]
  updateWebSiteInfoModel(where: WebSiteInfoModelWhereUniqueInput!, data: WebSiteInfoModelUpdateInput!): WebSiteInfoModel
  updateWebSiteInfoModels(data: [WebSiteInfoModelUpdateArgs!]!): [WebSiteInfoModel]
  deleteWebSiteInfoModel(where: WebSiteInfoModelWhereUniqueInput!): WebSiteInfoModel
  deleteWebSiteInfoModels(where: [WebSiteInfoModelWhereUniqueInput!]!): [WebSiteInfoModel]
  createWebSiteInfo_AppInfo_Model(data: WebSiteInfo_AppInfo_ModelCreateInput!): WebSiteInfo_AppInfo_Model
  createWebSiteInfoAppInfoModels(data: [WebSiteInfo_AppInfo_ModelCreateInput!]!): [WebSiteInfo_AppInfo_Model]
  updateWebSiteInfo_AppInfo_Model(where: WebSiteInfo_AppInfo_ModelWhereUniqueInput!, data: WebSiteInfo_AppInfo_ModelUpdateInput!): WebSiteInfo_AppInfo_Model
  updateWebSiteInfoAppInfoModels(data: [WebSiteInfo_AppInfo_ModelUpdateArgs!]!): [WebSiteInfo_AppInfo_Model]
  deleteWebSiteInfo_AppInfo_Model(where: WebSiteInfo_AppInfo_ModelWhereUniqueInput!): WebSiteInfo_AppInfo_Model
  deleteWebSiteInfoAppInfoModels(where: [WebSiteInfo_AppInfo_ModelWhereUniqueInput!]!): [WebSiteInfo_AppInfo_Model]
  endSession: Boolean!
  authenticateUserModelWithPassword(email: String!, password: String!): UserModelAuthenticationWithPasswordResult
  createInitialUserModel(data: CreateInitialUserModelInput!): UserModelAuthenticationWithPasswordSuccess!
}

union UserModelAuthenticationWithPasswordResult = UserModelAuthenticationWithPasswordSuccess | UserModelAuthenticationWithPasswordFailure

type UserModelAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: UserModel!
}

type UserModelAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserModelInput {
  level: Int
  name: String
  email: String
  password: String
}

type Query {
  appInfoModels(where: AppInfoModelWhereInput! = {}, orderBy: [AppInfoModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppInfoModelWhereUniqueInput): [AppInfoModel!]
  appInfoModel(where: AppInfoModelWhereUniqueInput!): AppInfoModel
  appInfoModelsCount(where: AppInfoModelWhereInput! = {}): Int
  attachmentModels(where: AttachmentModelWhereInput! = {}, orderBy: [AttachmentModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttachmentModelWhereUniqueInput): [AttachmentModel!]
  attachmentModel(where: AttachmentModelWhereUniqueInput!): AttachmentModel
  attachmentModelsCount(where: AttachmentModelWhereInput! = {}): Int
  locationModels(where: LocationModelWhereInput! = {}, orderBy: [LocationModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationModelWhereUniqueInput): [LocationModel!]
  locationModel(where: LocationModelWhereUniqueInput!): LocationModel
  locationModelsCount(where: LocationModelWhereInput! = {}): Int
  postModels(where: PostModelWhereInput! = {}, orderBy: [PostModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostModelWhereUniqueInput): [PostModel!]
  postModel(where: PostModelWhereUniqueInput!): PostModel
  postModelsCount(where: PostModelWhereInput! = {}): Int
  ruleModels(where: RuleModelWhereInput! = {}, orderBy: [RuleModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RuleModelWhereUniqueInput): [RuleModel!]
  ruleModel(where: RuleModelWhereUniqueInput!): RuleModel
  ruleModelsCount(where: RuleModelWhereInput! = {}): Int
  termsModels(where: TermsModelWhereInput! = {}, orderBy: [TermsModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TermsModelWhereUniqueInput): [TermsModel!]
  termsModel(where: TermsModelWhereUniqueInput!): TermsModel
  termsModelsCount(where: TermsModelWhereInput! = {}): Int
  userModels(where: UserModelWhereInput! = {}, orderBy: [UserModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserModelWhereUniqueInput): [UserModel!]
  userModel(where: UserModelWhereUniqueInput!): UserModel
  userModelsCount(where: UserModelWhereInput! = {}): Int
  webSiteInfoModels(where: WebSiteInfoModelWhereInput! = {}, orderBy: [WebSiteInfoModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WebSiteInfoModelWhereUniqueInput): [WebSiteInfoModel!]
  webSiteInfoModel(where: WebSiteInfoModelWhereUniqueInput!): WebSiteInfoModel
  webSiteInfoModelsCount(where: WebSiteInfoModelWhereInput! = {}): Int
  webSiteInfoAppInfoModels(where: WebSiteInfo_AppInfo_ModelWhereInput! = {}, orderBy: [WebSiteInfo_AppInfo_ModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WebSiteInfo_AppInfo_ModelWhereUniqueInput): [WebSiteInfo_AppInfo_Model!]
  webSiteInfo_AppInfo_Model(where: WebSiteInfo_AppInfo_ModelWhereUniqueInput!): WebSiteInfo_AppInfo_Model
  webSiteInfoAppInfoModelsCount(where: WebSiteInfo_AppInfo_ModelWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = UserModel

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
